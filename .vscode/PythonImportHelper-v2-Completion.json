[
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "g",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "_",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "_",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "lazy_gettext",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "_",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "_",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "lazy_gettext",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "_",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "get_locale",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "_",
        "importPath": "flask_babel",
        "description": "flask_babel",
        "isExtraImport": true,
        "detail": "flask_babel",
        "documentation": {}
    },
    {
        "label": "send_email",
        "importPath": "app.email",
        "description": "app.email",
        "isExtraImport": true,
        "detail": "app.email",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "BooleanField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SubmitField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "TextAreaField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "BooleanField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SubmitField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "TextAreaField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Email",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "EqualTo",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Length",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Email",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Length",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "url_parse",
        "importPath": "werkzeug.urls",
        "description": "werkzeug.urls",
        "isExtraImport": true,
        "detail": "werkzeug.urls",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "mail",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.auth",
        "description": "app.auth",
        "isExtraImport": true,
        "detail": "app.auth",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "app.auth.forms",
        "description": "app.auth.forms",
        "isExtraImport": true,
        "detail": "app.auth.forms",
        "documentation": {}
    },
    {
        "label": "RegistrationForm",
        "importPath": "app.auth.forms",
        "description": "app.auth.forms",
        "isExtraImport": true,
        "detail": "app.auth.forms",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "app.auth.forms",
        "description": "app.auth.forms",
        "isExtraImport": true,
        "detail": "app.auth.forms",
        "documentation": {}
    },
    {
        "label": "send_password_reset_email",
        "importPath": "app.auth.email",
        "description": "app.auth.email",
        "isExtraImport": true,
        "detail": "app.auth.email",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.errors",
        "description": "app.errors",
        "isExtraImport": true,
        "detail": "app.errors",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "guess_language",
        "importPath": "guess_language",
        "description": "guess_language",
        "isExtraImport": true,
        "detail": "guess_language",
        "documentation": {}
    },
    {
        "label": "EditProfileForm",
        "importPath": "app.main.forms",
        "description": "app.main.forms",
        "isExtraImport": true,
        "detail": "app.main.forms",
        "documentation": {}
    },
    {
        "label": "PostForm",
        "importPath": "app.main.forms",
        "description": "app.main.forms",
        "isExtraImport": true,
        "detail": "app.main.forms",
        "documentation": {}
    },
    {
        "label": "translate",
        "importPath": "app.translate",
        "description": "app.translate",
        "isExtraImport": true,
        "detail": "app.translate",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "click",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "click",
        "description": "click",
        "detail": "click",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "flask_mail",
        "description": "flask_mail",
        "isExtraImport": true,
        "detail": "flask_mail",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "with_statement",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "pymongo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymongo",
        "description": "pymongo",
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "send_password_reset_email",
        "kind": 2,
        "importPath": "app.auth.email",
        "description": "app.auth.email",
        "peekOfCode": "def send_password_reset_email(user):\n    token = user.get_reset_password_token()\n    send_email(_('[Microblog] Reset Your Password'),\n               sender=app.config['ADMINS'][0],\n               recipients=[user.email],\n               text_body=render_template('email/reset_password.txt',\n                                         user=user, token=token),\n               html_body=render_template('email/reset_password.html',\n                                         user=user, token=token))",
        "detail": "app.auth.email",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "app.auth.forms",
        "description": "app.auth.forms",
        "peekOfCode": "class LoginForm(FlaskForm):\n    username = StringField(_l('Username'), validators=[DataRequired()])\n    password = PasswordField(_l('Password'), validators=[DataRequired()])\n    remember_me = BooleanField(_l('Remember Me'))\n    submit = SubmitField(_l('Sign In'))\nclass RegistrationForm(FlaskForm):\n    username = StringField(_l('Username'), validators=[DataRequired()])\n    email = StringField(_l('Email'), validators=[DataRequired(), Email()])\n    password = PasswordField(_l('Password'), validators=[DataRequired()])\n    password2 = PasswordField(",
        "detail": "app.auth.forms",
        "documentation": {}
    },
    {
        "label": "RegistrationForm",
        "kind": 6,
        "importPath": "app.auth.forms",
        "description": "app.auth.forms",
        "peekOfCode": "class RegistrationForm(FlaskForm):\n    username = StringField(_l('Username'), validators=[DataRequired()])\n    email = StringField(_l('Email'), validators=[DataRequired(), Email()])\n    password = PasswordField(_l('Password'), validators=[DataRequired()])\n    password2 = PasswordField(\n        _l('Repeat Password'), validators=[DataRequired(), EqualTo('password')])\n    submit = SubmitField(_l('Register'))\n    def validate_username(self, username):\n        user = User.query.filter_by(username=username.data).first()\n        if user is not None:",
        "detail": "app.auth.forms",
        "documentation": {}
    },
    {
        "label": "ResetPasswordForm",
        "kind": 6,
        "importPath": "app.auth.forms",
        "description": "app.auth.forms",
        "peekOfCode": "class ResetPasswordForm(FlaskForm):\n    password = PasswordField(_l('Password'), validators=[DataRequired()])\n    password2 = PasswordField(\n        _l('Repeat Password'), validators=[DataRequired(), EqualTo('password')])\n    submit = SubmitField(_l('Request Password Reset'))\nclass ResetPasswordRequestForm(FlaskForm):\n    email = StringField(_l('Email'), validators=[DataRequired(), Email()])\n    submit = SubmitField(_l('Request Password Reset'))",
        "detail": "app.auth.forms",
        "documentation": {}
    },
    {
        "label": "ResetPasswordRequestForm",
        "kind": 6,
        "importPath": "app.auth.forms",
        "description": "app.auth.forms",
        "peekOfCode": "class ResetPasswordRequestForm(FlaskForm):\n    email = StringField(_l('Email'), validators=[DataRequired(), Email()])\n    submit = SubmitField(_l('Request Password Reset'))",
        "detail": "app.auth.forms",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def login():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.index'))\n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.username.data).first()\n        if user is None or not user.check_password(form.password.data):\n            flash('Invalid username or password')\n            return redirect(url_for('auth.login'))\n        login_user(user, remember=form.remember_me.data)",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def register():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.index'))\n    form = RegistrationForm()\n    if form.validate_on_submit():\n        user = User(username=form.username.data, email=form.email.data)\n        user.set_password(form.password.data)\n        db.session.add(user)\n        db.session.commit()\n        flash('Congratulations, you are now a registered user!')",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "reset_password_request",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def reset_password_request():\n    if current_user.is_authenticated:\n        return redirect(url_for('main.index'))\n    form = ResetPasswordRequestForm()\n    if form.validate_on_submit():\n        user= User.query.filter_by(email=form.email.data).first()\n        if user:\n            send_password_reset_email(user)\n        flash('Check your email for the instructions to reset your password')\n        return redirect(url_for('auth.login'))",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "reset_password",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def reset_password(token):\n    if current_user.is_authenticated:\n        return redirect(url_for('main.index'))\n    user = User.verify_reset_password_token(token)\n    if not user:\n        return redirect(url_for('main.index'))\n    form = ResetPasswordForm()\n    if form.validate_on_submit():\n        user.set_password(form.password.data)\n        db.session.commit()",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "app.auth.routes",
        "description": "app.auth.routes",
        "peekOfCode": "def logout():\n    logout_user()\n    return redirect(url_for('main.index'))",
        "detail": "app.auth.routes",
        "documentation": {}
    },
    {
        "label": "not_found_error",
        "kind": 2,
        "importPath": "app.errors.handlers",
        "description": "app.errors.handlers",
        "peekOfCode": "def not_found_error(error):\n    return render_template('errors/404.html'), 404\n@bp.app_errorhandler(500)\ndef internal_error(error):\n    db.session.rollback()\n    return render_template('errors/500.html'), 500",
        "detail": "app.errors.handlers",
        "documentation": {}
    },
    {
        "label": "internal_error",
        "kind": 2,
        "importPath": "app.errors.handlers",
        "description": "app.errors.handlers",
        "peekOfCode": "def internal_error(error):\n    db.session.rollback()\n    return render_template('errors/500.html'), 500",
        "detail": "app.errors.handlers",
        "documentation": {}
    },
    {
        "label": "EditProfileForm",
        "kind": 6,
        "importPath": "app.main.forms",
        "description": "app.main.forms",
        "peekOfCode": "class EditProfileForm(FlaskForm):\n    username = StringField(_l('Username'), validators=[DataRequired()])\n    about_me = TextAreaField(_l('About me'), validators= [Length(min=0, max=140)])\n    submit = SubmitField(_l('Submit'))\n    def __init__(self, original_username, *args, **kwargs):\n        super(EditProfileForm, self).__init__(*args, **kwargs)\n        self.original_username = original_username\n    def validate_username(self, username):\n        if username.data != self.original_username:\n            user = User.query.filter_by(username=self.username.data).first()",
        "detail": "app.main.forms",
        "documentation": {}
    },
    {
        "label": "PostForm",
        "kind": 6,
        "importPath": "app.main.forms",
        "description": "app.main.forms",
        "peekOfCode": "class PostForm(FlaskForm):\n    post = TextAreaField(_l(\"Say Something!\"), validators=[DataRequired(),Length(1,140)])\n    submit= SubmitField(_l(\"Post\"))",
        "detail": "app.main.forms",
        "documentation": {}
    },
    {
        "label": "before_request",
        "kind": 2,
        "importPath": "app.main.routes",
        "description": "app.main.routes",
        "peekOfCode": "def before_request():\n    if current_user.is_authenticated:\n        current_user.last_seen = datetime.utcnow()\n        db.session.commit()\n    g.locale = str(get_locale())\n@bp.route('/', methods=['get','post'])\n@bp.route('/index', methods=['get','post'])\n@login_required\ndef index():\n    form = PostForm()",
        "detail": "app.main.routes",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.main.routes",
        "description": "app.main.routes",
        "peekOfCode": "def index():\n    form = PostForm()\n    if form.validate_on_submit():\n        post = Post(body = form.post.data, author = current_user)\n        db.session.add(post)\n        db.session.commit()\n        flash(_('Your post is now live!'))\n        return redirect(url_for('main.index'))\n    page = request.args.get('page', 1, type=int)\n    posts = current_user.followed_posts().paginate(page, current_app.config['POSTS_PER_PAGE'], False)",
        "detail": "app.main.routes",
        "documentation": {}
    },
    {
        "label": "explore",
        "kind": 2,
        "importPath": "app.main.routes",
        "description": "app.main.routes",
        "peekOfCode": "def explore():\n    page = request.args.get('page', 1, type=int)\n    posts = current_user.followed_posts().paginate(page, current_app.config['POSTS_PER_PAGE'], False)\n    next_url = url_for('main.explore', page=posts.next_num) if posts.has_next else None\n    prev_url = url_for('main.explore', page=posts.prev_num) if posts.has_prev else None\n    return render_template('index.html', title='Explore', posts=posts.items, next_url=next_url, prev_url=prev_url)\n@bp.route('/user/<username>')\n@login_required\ndef user(username):\n    user = User.query.filter_by(username=username).first_or_404()",
        "detail": "app.main.routes",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": "app.main.routes",
        "description": "app.main.routes",
        "peekOfCode": "def user(username):\n    user = User.query.filter_by(username=username).first_or_404()\n    page = request.args.get('page', 1, type=int)\n    posts = user.posts.order_by(Post.timestamp.desc()).paginate(page, current_app.config['POSTS_PER_PAGE'], False)\n    next_url = url_for('main.user', username=user.username, page=posts.next_num) if posts.has_next else None\n    prev_url = url_for('main.user', username=user.username, page=posts.prev_num) if posts.has_prev else None\n    return render_template('user.html', user=user, posts=posts.items,\n                           next_url=next_url, prev_url=prev_url)\n@bp.route('/edit_profile', methods=['GET', 'POST'])\n@login_required",
        "detail": "app.main.routes",
        "documentation": {}
    },
    {
        "label": "edit_profile",
        "kind": 2,
        "importPath": "app.main.routes",
        "description": "app.main.routes",
        "peekOfCode": "def edit_profile():\n    form = EditProfileForm(current_user.username)\n    if form.validate_on_submit():\n        current_user.username = form.username.data\n        current_user.about_me = form.about_me.data\n        db.session.commit()\n        flash('Your changes have been saved.')\n        return redirect(url_for('main.edit_profile'))\n    elif request.method == 'GET':\n        form.username.data = current_user.username",
        "detail": "app.main.routes",
        "documentation": {}
    },
    {
        "label": "follow",
        "kind": 2,
        "importPath": "app.main.routes",
        "description": "app.main.routes",
        "peekOfCode": "def follow(username):\n    user = User.query.filter_by(username=username).first()\n    if user is None:\n        flash('User {} not found.'.format(username))\n        return redirect(url_for('main.index'))\n    if user == current_user:\n        flash('You cannot follow yourself!')\n        return redirect(url_for('main.user', username=username))\n    current_user.follow(user)\n    db.session.commit()",
        "detail": "app.main.routes",
        "documentation": {}
    },
    {
        "label": "unfollow",
        "kind": 2,
        "importPath": "app.main.routes",
        "description": "app.main.routes",
        "peekOfCode": "def unfollow(username):\n    user = User.query.filter_by(username=username)\n    if user is None:\n        flash('User {} not found.'.format(username))\n        return redirect(url_for('main.index'))\n    if user == current_user:\n        flash('You cannot follow yourself!')\n        return redirect(url_for('main.user', username=username))\n    current_user.unfollow(user)\n    db.session.commit()",
        "detail": "app.main.routes",
        "documentation": {}
    },
    {
        "label": "translate",
        "kind": 2,
        "importPath": "app.cli",
        "description": "app.cli",
        "peekOfCode": "def translate():\n    \"\"\"Translation and localization commands.\"\"\"\n    pass\n@translate.command()\n@click.argument('lang')\ndef init(lang):\n    \"\"\"Initialize a new language.\"\"\"\n    if os.system('pybabel extract -F babel.cfg -k _l -o messages.pot .'):\n        raise RuntimeError('extract command failed')\n    if os.system(",
        "detail": "app.cli",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "app.cli",
        "description": "app.cli",
        "peekOfCode": "def init(lang):\n    \"\"\"Initialize a new language.\"\"\"\n    if os.system('pybabel extract -F babel.cfg -k _l -o messages.pot .'):\n        raise RuntimeError('extract command failed')\n    if os.system(\n            'pybabel init -i messages.pot -d app/translations -l ' + lang):\n        raise RuntimeError('init command failed')\n    os.remove('messages.pot')\n@translate.command()\ndef update():",
        "detail": "app.cli",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "app.cli",
        "description": "app.cli",
        "peekOfCode": "def update():\n    \"\"\"Update all languages.\"\"\"\n    if os.system('pybabel extract -F babel.cfg -k _l -o messages.pot .'):\n        raise RuntimeError('extract command failed')\n    if os.system('pybabel update -i messages.pot -d app/translations'):\n        raise RuntimeError('update command failed')\n    os.remove('messages.pot')\n@translate.command()\ndef compile():\n    \"\"\"Compile all languages.\"\"\"",
        "detail": "app.cli",
        "documentation": {}
    },
    {
        "label": "compile",
        "kind": 2,
        "importPath": "app.cli",
        "description": "app.cli",
        "peekOfCode": "def compile():\n    \"\"\"Compile all languages.\"\"\"\n    if os.system('pybabel compile -d app/translations'):\n        raise RuntimeError('compile command failed')",
        "detail": "app.cli",
        "documentation": {}
    },
    {
        "label": "send_async_email",
        "kind": 2,
        "importPath": "app.email",
        "description": "app.email",
        "peekOfCode": "def send_async_email(app, msg):\n    with app.app_context():\n        mail.send(msg)\ndef send_email(subject, sender, recipients, text_body, html_body):\n    msg = Message(subject, sender=sender, recipients=recipients)\n    msg.body = text_body\n    msg.html = html_body\n    Thread(target=send_async_email, args=(current_app._get_current_object(), msg)).start()",
        "detail": "app.email",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "app.email",
        "description": "app.email",
        "peekOfCode": "def send_email(subject, sender, recipients, text_body, html_body):\n    msg = Message(subject, sender=sender, recipients=recipients)\n    msg.body = text_body\n    msg.html = html_body\n    Thread(target=send_async_email, args=(current_app._get_current_object(), msg)).start()",
        "detail": "app.email",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class User(UserMixin, db.Model):\n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n    # create Gravatar Avatar\n    def avatar(self, size):\n        digest = md5(self.email.lower().encode('utf-8')).hexdigest()\n        return 'https://www.gravatar.com/avatar/{}?d=identicon&s={}'.format(\n            digest, size)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Post(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    body = db.Column(db.String(140))\n    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "load_user",
        "kind": 2,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "def load_user(id):\n    return User.query.get(int(id))\n# Auxiliary tables that has no data other than the foreign keys\nfollowers = db.Table('followers',\n    db.Column('follower_id', db.Integer, db.ForeignKey('user.id')),\n    db.Column('followed_id', db.Integer, db.ForeignKey('user.id'))\n)\nclass User(UserMixin, db.Model):\n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "followers",
        "kind": 5,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "followers = db.Table('followers',\n    db.Column('follower_id', db.Integer, db.ForeignKey('user.id')),\n    db.Column('followed_id', db.Integer, db.ForeignKey('user.id'))\n)\nclass User(UserMixin, db.Model):\n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n    # create Gravatar Avatar",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "translate",
        "kind": 2,
        "importPath": "app.translate",
        "description": "app.translate",
        "peekOfCode": "def translate(text, source_language, dest_language):\n    if 'MS_TRANSLATOR_KEY' not in current_app.config or \\\n            not current_app.config['MS_TRANSLATOR_KEY']:\n        return _('Error: the translation service is not configured.')\n    auth = {\n        'Ocp-Apim-Subscription-Key': current_app.config['MS_TRANSLATOR_KEY']}\n    r = requests.get('https://api.microsofttranslator.com/v2/Ajax.svc'\n                     '/Translate?text={}&from={}&to={}'.format(\n                         text, source_language, dest_language),\n                     headers=auth)",
        "detail": "app.translate",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.0e3687dd831f_users",
        "description": "migrations.versions.0e3687dd831f_users",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=64), nullable=True),\n    sa.Column('email', sa.String(length=120), nullable=True),\n    sa.Column('password_hash', sa.String(length=128), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)",
        "detail": "migrations.versions.0e3687dd831f_users",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.0e3687dd831f_users",
        "description": "migrations.versions.0e3687dd831f_users",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_user_username'), table_name='user')\n    op.drop_index(op.f('ix_user_email'), table_name='user')\n    op.drop_table('user')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.0e3687dd831f_users",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.0e3687dd831f_users",
        "description": "migrations.versions.0e3687dd831f_users",
        "peekOfCode": "revision = '0e3687dd831f'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=64), nullable=True),\n    sa.Column('email', sa.String(length=120), nullable=True),",
        "detail": "migrations.versions.0e3687dd831f_users",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.0e3687dd831f_users",
        "description": "migrations.versions.0e3687dd831f_users",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=64), nullable=True),\n    sa.Column('email', sa.String(length=120), nullable=True),\n    sa.Column('password_hash', sa.String(length=128), nullable=True),",
        "detail": "migrations.versions.0e3687dd831f_users",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.0e3687dd831f_users",
        "description": "migrations.versions.0e3687dd831f_users",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=64), nullable=True),\n    sa.Column('email', sa.String(length=120), nullable=True),\n    sa.Column('password_hash', sa.String(length=128), nullable=True),\n    sa.PrimaryKeyConstraint('id')",
        "detail": "migrations.versions.0e3687dd831f_users",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.0e3687dd831f_users",
        "description": "migrations.versions.0e3687dd831f_users",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('username', sa.String(length=64), nullable=True),\n    sa.Column('email', sa.String(length=120), nullable=True),\n    sa.Column('password_hash', sa.String(length=128), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )",
        "detail": "migrations.versions.0e3687dd831f_users",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "description": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('user', sa.Column('about_me', sa.String(length=140), nullable=True))\n    op.add_column('user', sa.Column('last_seen', sa.DateTime(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('user', 'last_seen')\n    op.drop_column('user', 'about_me')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "description": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('user', 'last_seen')\n    op.drop_column('user', 'about_me')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "description": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "peekOfCode": "revision = '18e785d31c3c'\ndown_revision = 'f9da8945bda6'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('user', sa.Column('about_me', sa.String(length=140), nullable=True))\n    op.add_column('user', sa.Column('last_seen', sa.DateTime(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():",
        "detail": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "description": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "peekOfCode": "down_revision = 'f9da8945bda6'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('user', sa.Column('about_me', sa.String(length=140), nullable=True))\n    op.add_column('user', sa.Column('last_seen', sa.DateTime(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "description": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('user', sa.Column('about_me', sa.String(length=140), nullable=True))\n    op.add_column('user', sa.Column('last_seen', sa.DateTime(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('user', 'last_seen')",
        "detail": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "description": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('user', sa.Column('about_me', sa.String(length=140), nullable=True))\n    op.add_column('user', sa.Column('last_seen', sa.DateTime(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('user', 'last_seen')\n    op.drop_column('user', 'about_me')",
        "detail": "migrations.versions.18e785d31c3c_new_fields_in_user_model",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.db51787fbc73_followers",
        "description": "migrations.versions.db51787fbc73_followers",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('followers',\n    sa.Column('follower_id', sa.Integer(), nullable=True),\n    sa.Column('followed_id', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['followed_id'], ['user.id'], ),\n    sa.ForeignKeyConstraint(['follower_id'], ['user.id'], )\n    )\n    # ### end Alembic commands ###\ndef downgrade():",
        "detail": "migrations.versions.db51787fbc73_followers",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.db51787fbc73_followers",
        "description": "migrations.versions.db51787fbc73_followers",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('followers')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.db51787fbc73_followers",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.db51787fbc73_followers",
        "description": "migrations.versions.db51787fbc73_followers",
        "peekOfCode": "revision = 'db51787fbc73'\ndown_revision = '18e785d31c3c'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('followers',\n    sa.Column('follower_id', sa.Integer(), nullable=True),\n    sa.Column('followed_id', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['followed_id'], ['user.id'], ),",
        "detail": "migrations.versions.db51787fbc73_followers",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.db51787fbc73_followers",
        "description": "migrations.versions.db51787fbc73_followers",
        "peekOfCode": "down_revision = '18e785d31c3c'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('followers',\n    sa.Column('follower_id', sa.Integer(), nullable=True),\n    sa.Column('followed_id', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['followed_id'], ['user.id'], ),\n    sa.ForeignKeyConstraint(['follower_id'], ['user.id'], )",
        "detail": "migrations.versions.db51787fbc73_followers",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.db51787fbc73_followers",
        "description": "migrations.versions.db51787fbc73_followers",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('followers',\n    sa.Column('follower_id', sa.Integer(), nullable=True),\n    sa.Column('followed_id', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['followed_id'], ['user.id'], ),\n    sa.ForeignKeyConstraint(['follower_id'], ['user.id'], )\n    )",
        "detail": "migrations.versions.db51787fbc73_followers",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.db51787fbc73_followers",
        "description": "migrations.versions.db51787fbc73_followers",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('followers',\n    sa.Column('follower_id', sa.Integer(), nullable=True),\n    sa.Column('followed_id', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['followed_id'], ['user.id'], ),\n    sa.ForeignKeyConstraint(['follower_id'], ['user.id'], )\n    )\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.db51787fbc73_followers",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.f9da8945bda6_posts_table",
        "description": "migrations.versions.f9da8945bda6_posts_table",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('post',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('body', sa.String(length=140), nullable=True),\n    sa.Column('timestamp', sa.DateTime(), nullable=True),\n    sa.Column('user_id', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )",
        "detail": "migrations.versions.f9da8945bda6_posts_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.f9da8945bda6_posts_table",
        "description": "migrations.versions.f9da8945bda6_posts_table",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_post_timestamp'), table_name='post')\n    op.drop_table('post')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.f9da8945bda6_posts_table",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.f9da8945bda6_posts_table",
        "description": "migrations.versions.f9da8945bda6_posts_table",
        "peekOfCode": "revision = 'f9da8945bda6'\ndown_revision = '0e3687dd831f'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('post',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('body', sa.String(length=140), nullable=True),\n    sa.Column('timestamp', sa.DateTime(), nullable=True),",
        "detail": "migrations.versions.f9da8945bda6_posts_table",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.f9da8945bda6_posts_table",
        "description": "migrations.versions.f9da8945bda6_posts_table",
        "peekOfCode": "down_revision = '0e3687dd831f'\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('post',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('body', sa.String(length=140), nullable=True),\n    sa.Column('timestamp', sa.DateTime(), nullable=True),\n    sa.Column('user_id', sa.Integer(), nullable=True),",
        "detail": "migrations.versions.f9da8945bda6_posts_table",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.f9da8945bda6_posts_table",
        "description": "migrations.versions.f9da8945bda6_posts_table",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('post',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('body', sa.String(length=140), nullable=True),\n    sa.Column('timestamp', sa.DateTime(), nullable=True),\n    sa.Column('user_id', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),",
        "detail": "migrations.versions.f9da8945bda6_posts_table",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.f9da8945bda6_posts_table",
        "description": "migrations.versions.f9da8945bda6_posts_table",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('post',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('body', sa.String(length=140), nullable=True),\n    sa.Column('timestamp', sa.DateTime(), nullable=True),\n    sa.Column('user_id', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),\n    sa.PrimaryKeyConstraint('id')",
        "detail": "migrations.versions.f9da8945bda6_posts_table",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nfrom flask import current_app",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "logger = logging.getLogger('alembic.env')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nfrom flask import current_app\nconfig.set_main_option('sqlalchemy.url',\n                       current_app.config.get('SQLALCHEMY_DATABASE_URI'))\ntarget_metadata = current_app.extensions['migrate'].db.metadata\n# other values from the config, defined by the needs of env.py,",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_metadata = current_app.extensions['migrate'].db.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "updateLabel",
        "kind": 2,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "def updateLabel(message):\n    lbl_display.config(text=message)\ndef validateUnique(task_name):\n    tasks= collection.find()\n    for task in tasks:\n        if task['Title'].lower().strip() == task_name.lower().strip():\n            return False\n    return True\ndef update_task():\n    lb_tasks.delete(0,'end')",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "validateUnique",
        "kind": 2,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "def validateUnique(task_name):\n    tasks= collection.find()\n    for task in tasks:\n        if task['Title'].lower().strip() == task_name.lower().strip():\n            return False\n    return True\ndef update_task():\n    lb_tasks.delete(0,'end')\n    tasks=collection.find()\n    for task in tasks:",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "update_task",
        "kind": 2,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "def update_task():\n    lb_tasks.delete(0,'end')\n    tasks=collection.find()\n    for task in tasks:\n        lb_tasks.insert(\"end\",task['Title'])\ndef add_task():\n    if (txt_input.get() != \"\" and validateUnique(txt_input.get())):\n        task = { \"Title\" : txt_input.get()}\n        collection.insert_one(task)\n        txt_input.delete(0,'end')",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "add_task",
        "kind": 2,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "def add_task():\n    if (txt_input.get() != \"\" and validateUnique(txt_input.get())):\n        task = { \"Title\" : txt_input.get()}\n        collection.insert_one(task)\n        txt_input.delete(0,'end')\n        update_task()\n        updateLabel('') \n    else:\n        updateLabel('Please add valid task name.') \ndef delete_task():",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "delete_task",
        "kind": 2,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "def delete_task():\n    cursorInfo=lb_tasks.curselection()\n    if cursorInfo != ():\n        taskName = lb_tasks.get(cursorInfo)\n        tasks=collection.find()\n        for task in tasks:\n            if task['Title'] == taskName:\n                collection.delete_one({'_id': task['_id']})\n                update_task()\n                updateLabel('')",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "delete_all",
        "kind": 2,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "def delete_all():\n    collection.delete_many({})\n    lb_tasks.delete(0,'end')\ndef sort_asc():\n    tasks= list(lb_tasks.get(0,'end'))\n    tasks.sort(key=str.lower)\n    lb_tasks.delete(0,'end')\n    for task in tasks:\n        lb_tasks.insert(\"end\",task)\ndef sort_dec():",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "sort_asc",
        "kind": 2,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "def sort_asc():\n    tasks= list(lb_tasks.get(0,'end'))\n    tasks.sort(key=str.lower)\n    lb_tasks.delete(0,'end')\n    for task in tasks:\n        lb_tasks.insert(\"end\",task)\ndef sort_dec():\n    tasks= list(lb_tasks.get(0,'end'))\n    tasks.sort(key=str.lower,reverse=True)\n    lb_tasks.delete(0,'end')",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "sort_dec",
        "kind": 2,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "def sort_dec():\n    tasks= list(lb_tasks.get(0,'end'))\n    tasks.sort(key=str.lower,reverse=True)\n    lb_tasks.delete(0,'end')\n    for task in tasks:\n        lb_tasks.insert(\"end\",task)\ndef choose_rand():\n    tasks= list(lb_tasks.get(0,'end'))\n    updateLabel(random.choice(tasks))\ndef show_number_of_tasks():",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "choose_rand",
        "kind": 2,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "def choose_rand():\n    tasks= list(lb_tasks.get(0,'end'))\n    updateLabel(random.choice(tasks))\ndef show_number_of_tasks():\n    tasks= list(lb_tasks.get(0,'end'))\n    updateLabel(len(tasks))\n# create UI Elements\nlbl_title= tk.Label(root,text='My To-do List', bg='white')\nlbl_title.pack()\nlbl_display= tk.Label(root,text='', bg='white')",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "show_number_of_tasks",
        "kind": 2,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "def show_number_of_tasks():\n    tasks= list(lb_tasks.get(0,'end'))\n    updateLabel(len(tasks))\n# create UI Elements\nlbl_title= tk.Label(root,text='My To-do List', bg='white')\nlbl_title.pack()\nlbl_display= tk.Label(root,text='', bg='white')\nlbl_display.pack()\ntxt_input= tk.Entry(root,width=35)\ntxt_input.pack()",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "client = MongoClient(\"mongodb+srv://abhinav:abhi123@smsclustor-zndnc.mongodb.net/\")\ndb = client.get_database(\"MyToDo\")\ncollection= db.get_collection(\"MyToDoCollection\")\n# create root window\nroot = tk.Tk()\nroot.configure(bg='white')\nroot.title(\"My todo list application\")\nroot.geometry(\"250x500\")\n# create const and variable\ntasks = []",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "db = client.get_database(\"MyToDo\")\ncollection= db.get_collection(\"MyToDoCollection\")\n# create root window\nroot = tk.Tk()\nroot.configure(bg='white')\nroot.title(\"My todo list application\")\nroot.geometry(\"250x500\")\n# create const and variable\ntasks = []\n# create functions",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "root = tk.Tk()\nroot.configure(bg='white')\nroot.title(\"My todo list application\")\nroot.geometry(\"250x500\")\n# create const and variable\ntasks = []\n# create functions\ndef updateLabel(message):\n    lbl_display.config(text=message)\ndef validateUnique(task_name):",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "tasks = []\n# create functions\ndef updateLabel(message):\n    lbl_display.config(text=message)\ndef validateUnique(task_name):\n    tasks= collection.find()\n    for task in tasks:\n        if task['Title'].lower().strip() == task_name.lower().strip():\n            return False\n    return True",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "btn_add_task",
        "kind": 5,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "btn_add_task = tk.Button(root,text='Add Task', fg='green', bg='white', command=add_task)\nbtn_add_task.pack()\nbtn_delete_task = tk.Button(root,text='Delete Task', fg='green', bg='white', command=delete_task)\nbtn_delete_task.pack()\nbtn_delete_all = tk.Button(root,text='Delete All', fg='green', bg='white', command=delete_all)\nbtn_delete_all.pack()\nbtn_sort_asc = tk.Button(root,text='Sort Accending', fg='green', bg='white', command=sort_asc)\nbtn_sort_asc.pack()\nbtn_sort_dec = tk.Button(root,text='Sort Descending', fg='green', bg='white', command=sort_dec)\nbtn_sort_dec.pack()",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "btn_delete_task",
        "kind": 5,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "btn_delete_task = tk.Button(root,text='Delete Task', fg='green', bg='white', command=delete_task)\nbtn_delete_task.pack()\nbtn_delete_all = tk.Button(root,text='Delete All', fg='green', bg='white', command=delete_all)\nbtn_delete_all.pack()\nbtn_sort_asc = tk.Button(root,text='Sort Accending', fg='green', bg='white', command=sort_asc)\nbtn_sort_asc.pack()\nbtn_sort_dec = tk.Button(root,text='Sort Descending', fg='green', bg='white', command=sort_dec)\nbtn_sort_dec.pack()\nbtn_choose_rand = tk.Button(root,text='Choose Random', fg='green', bg='white', command=choose_rand)\nbtn_choose_rand.pack()",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "btn_delete_all",
        "kind": 5,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "btn_delete_all = tk.Button(root,text='Delete All', fg='green', bg='white', command=delete_all)\nbtn_delete_all.pack()\nbtn_sort_asc = tk.Button(root,text='Sort Accending', fg='green', bg='white', command=sort_asc)\nbtn_sort_asc.pack()\nbtn_sort_dec = tk.Button(root,text='Sort Descending', fg='green', bg='white', command=sort_dec)\nbtn_sort_dec.pack()\nbtn_choose_rand = tk.Button(root,text='Choose Random', fg='green', bg='white', command=choose_rand)\nbtn_choose_rand.pack()\nbtn_number_of_tasks = tk.Button(root,text='Number Of Tasks', fg='green', bg='white', command=show_number_of_tasks)\nbtn_number_of_tasks.pack()",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "btn_sort_asc",
        "kind": 5,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "btn_sort_asc = tk.Button(root,text='Sort Accending', fg='green', bg='white', command=sort_asc)\nbtn_sort_asc.pack()\nbtn_sort_dec = tk.Button(root,text='Sort Descending', fg='green', bg='white', command=sort_dec)\nbtn_sort_dec.pack()\nbtn_choose_rand = tk.Button(root,text='Choose Random', fg='green', bg='white', command=choose_rand)\nbtn_choose_rand.pack()\nbtn_number_of_tasks = tk.Button(root,text='Number Of Tasks', fg='green', bg='white', command=show_number_of_tasks)\nbtn_number_of_tasks.pack()\nbtn_exit = tk.Button(root,text='Exit', fg='green', bg='white', command=exit)\nbtn_exit.pack()",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "btn_sort_dec",
        "kind": 5,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "btn_sort_dec = tk.Button(root,text='Sort Descending', fg='green', bg='white', command=sort_dec)\nbtn_sort_dec.pack()\nbtn_choose_rand = tk.Button(root,text='Choose Random', fg='green', bg='white', command=choose_rand)\nbtn_choose_rand.pack()\nbtn_number_of_tasks = tk.Button(root,text='Number Of Tasks', fg='green', bg='white', command=show_number_of_tasks)\nbtn_number_of_tasks.pack()\nbtn_exit = tk.Button(root,text='Exit', fg='green', bg='white', command=exit)\nbtn_exit.pack()\nlb_tasks= tk.Listbox(root, width=100)\nlb_tasks.pack()",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "btn_choose_rand",
        "kind": 5,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "btn_choose_rand = tk.Button(root,text='Choose Random', fg='green', bg='white', command=choose_rand)\nbtn_choose_rand.pack()\nbtn_number_of_tasks = tk.Button(root,text='Number Of Tasks', fg='green', bg='white', command=show_number_of_tasks)\nbtn_number_of_tasks.pack()\nbtn_exit = tk.Button(root,text='Exit', fg='green', bg='white', command=exit)\nbtn_exit.pack()\nlb_tasks= tk.Listbox(root, width=100)\nlb_tasks.pack()\nupdate_task()\n# start the main event loop",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "btn_number_of_tasks",
        "kind": 5,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "btn_number_of_tasks = tk.Button(root,text='Number Of Tasks', fg='green', bg='white', command=show_number_of_tasks)\nbtn_number_of_tasks.pack()\nbtn_exit = tk.Button(root,text='Exit', fg='green', bg='white', command=exit)\nbtn_exit.pack()\nlb_tasks= tk.Listbox(root, width=100)\nlb_tasks.pack()\nupdate_task()\n# start the main event loop\nroot.mainloop()",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "btn_exit",
        "kind": 5,
        "importPath": "SubApplications.SinglePageApplication",
        "description": "SubApplications.SinglePageApplication",
        "peekOfCode": "btn_exit = tk.Button(root,text='Exit', fg='green', bg='white', command=exit)\nbtn_exit.pack()\nlb_tasks= tk.Listbox(root, width=100)\nlb_tasks.pack()\nupdate_task()\n# start the main event loop\nroot.mainloop()",
        "detail": "SubApplications.SinglePageApplication",
        "documentation": {}
    },
    {
        "label": "TestConfig",
        "kind": 6,
        "importPath": "tests.tests",
        "description": "tests.tests",
        "peekOfCode": "class TestConfig(Config):\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = 'sqlite://'\nclass UserModelCase(unittest.TestCase):\n    def setUp(self):\n        self.app = create_app(TestConfig)\n        self.app_context = self.app.app_context()\n        self.app_context.push()\n        db.create_all()\n    def tearDown(self):",
        "detail": "tests.tests",
        "documentation": {}
    },
    {
        "label": "UserModelCase",
        "kind": 6,
        "importPath": "tests.tests",
        "description": "tests.tests",
        "peekOfCode": "class UserModelCase(unittest.TestCase):\n    def setUp(self):\n        self.app = create_app(TestConfig)\n        self.app_context = self.app.app_context()\n        self.app_context.push()\n        db.create_all()\n    def tearDown(self):\n        db.session.remove()\n        db.drop_all()\n        self.app_context.pop()",
        "detail": "tests.tests",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config(object):\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'test-Key=jasoidjauisbdhjbasid'\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \\\n        'sqlite:///' + os.path.join(basedir, 'app.db')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    MAIL_SERVER = os.environ.get('MAIL_SERVER')\n    MAIL_PORT = int(os.environ.get('MAIL_PORT') or 25)\n    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS') is not None\n    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')\n    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "basedir",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "basedir = os.path.abspath(os.path.dirname(__file__))\n'''\nThe SQLALCHEMY_TRACK_MODIFICATIONS configuration option is set to \nFalse to disable a feature of Flask-SQLAlchemy that I do not need, \nwhich is to signal the application every time a change is about to \nbe made in the database.\n'''\nclass Config(object):\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'test-Key=jasoidjauisbdhjbasid'\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \\",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "make_shell_context",
        "kind": 2,
        "importPath": "microblog",
        "description": "microblog",
        "peekOfCode": "def make_shell_context():\n    return {'db': db, 'User': User, 'Post': Post}\n'''\nWith a regular interpreter session, the app symbol is not known unless\nit is explicitly imported, but when using flask shell, \nthe command pre-imports the application instance. \nThe nice thing about flask shell is not that it pre-imports \napp, but that you can configure a \"shell context\", which is a \nlist of other symbols to pre-import.\n'''",
        "detail": "microblog",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "microblog",
        "description": "microblog",
        "peekOfCode": "app = create_app()\ncli.register(app)\n@app.shell_context_processor\ndef make_shell_context():\n    return {'db': db, 'User': User, 'Post': Post}\n'''\nWith a regular interpreter session, the app symbol is not known unless\nit is explicitly imported, but when using flask shell, \nthe command pre-imports the application instance. \nThe nice thing about flask shell is not that it pre-imports ",
        "detail": "microblog",
        "documentation": {}
    }
]